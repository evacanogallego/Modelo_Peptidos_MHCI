install.packages("dplyr")
cat("/014")
gc()
# limpieza
rm(list = ls())
# limpieza
rm(list = ls())
cat("\014")
gc()
library(dplyr)
install.packages("data.table")
library(data.table)
setwd("~/Desktop/Proyectos_ML")
path <- "~/Desktop/Proyectos_ML"
path <- "~/Desktop/Proyectos_ML"
path <- "~/Desktop/Proyectos_ML"
proj <- "Pec_1"
pathProj <- file.path(path, proj)
pathData <- file.path(pathProj, "datos")
datos <- fread(file.path(pathData, "peptidos.csv"))
datos <- fread(file.path(pathData, "peptidos.csv"), sep=",", data.table = F, stringsAsFactors = F)
blosum <- fread(file.path(pathData, "BLOSUM62_probabilities.csv"), sep=",", data.table = F, stringsAsFactors = F)
View(blosum)
View(datos)
datos <- fread(file.path(pathData, "peptidos.csv"), sep=";", data.table = F, stringsAsFactors = F)
blosum <- fread(file.path(pathData, "BLOSUM62_probabilities.csv"), sep=";", data.table = F, stringsAsFactors = F)
View(blosum)
View(datos)
View(datos)
View(blosum)
strsplit(datos$sequence[1])
strsplit(datos$sequence[1], "")
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
install.packages("stringr")
install.packages("dummy")
library(stringr)
onehotpept <- function(pept){
# primero separamos las secuencias peptidocas por aminoacidos:
pept_seq <- as.data.frame(str_split_fixed(pept$sequence, "", nchar(pept[1,1])))
# Luego las transformamos en 0 y 1 con la función dummy().
return(data.frame(dummy(pept_seq)))
}
debug(onehotpept)
datos_dummies <- onehotpept(datos)
View(pept)
View(pept_seq)
library(dplyr)
library(data.table)
library(stringr)
library(dummy)
datos_dummies <- onehotpept(datos)
df_final <- data.frame(dummy(pept_seq))
View(df_final)
dummy(pept_seq)
df <- dummy(pept_seq)
View(df)
strsplit(datos$sequence[1], "")
datos_tr <- apply(datos, 1, function(x) strsplit(x, ""))
datos_tr <- apply(datos, 1, function(x) strsplit(x, ""))
View(datos_tr)
datos_tr <- apply(datos$sequence, 1, function(x) strsplit(x, ""))
datos_tr <- apply(datos$sequence, 1, function(x) strsplit(x, ""))
datos_tr <- datos %>%
mutate(aa = str_split(sequence, "")) %>% # Dividir la cadena en caracteres
unnest_wider(aa, names_sep = "_")
install.packages("tidyverse")
library(tidyverse)
datos_tr <- datos %>%
mutate(aa = str_split(sequence, "")) %>% # Dividir la cadena en caracteres
unnest_wider(aa, names_sep = "_")
datos_dummies <- dummy(datos_tr)
columns <- grep("aa", names(datos_tr), value = T)
columns
datos_dummies <- dummy(datos_tr[,columns])
View(datos_dummies)
datos_dummies <- cbind(datos[,c("sequence", "label")], datos_dummies)
datos_dummies$id <- 1:nrow(datos_dummies)
master <- datos_dummies %>% select(id, sequence, label)
pathTmp <- file.path(pathProj, "tmp")
saveRDS(master, file.path(pathTmp, "master.rds"))
datos_dummies$sequence=NULL
datos_dummies <- datos_dummies %>% mutate(target = ifelse(label == "SB", 1, 0))
datos_dummies$label=NULL
datos_dummies <- datos_dummies %>% select(id, target, everything())
# separamos target en train y test
set.seed(123)
install.packages("caret")
library(caret)
trainIndex <- createDataPartition(datos_dummies$id, p = 0.7, list = FALSE)
trainIndex
train <- datos_dummies[trainIndex, ]
test <- datos_dummies[-trainIndex, ]
table(train$target)
table(test$target)
library(class)
library(kknn)
install.packages("kknn")
knn_model <- train.kknn(train$target ~ ., data = train, kmax = 50)
library(kknn)
knn_model <- train.kknn(train$target ~ ., data = train, kmax = 50)
print(knn_model)
k = 1:20
k
x <- train[,-c("target", "id")]
train_predictoras <- train %>% select(-target, -id)
test_predictoras <- test %>% select(-target, -id)
k_lista = 1:20
k_lista = c(7,8,9)
predicciones <- lapply(k_lista, function(k) {
knn(train_predictoras,
test_predictoras,
cl = train$target,
k = k)
})
View(predicciones)
predicciones[[1]]
k_lista = 1:20
predicciones <- lapply(k_lista, function(k) {
knn(train_predictoras,
test_predictoras,
cl = train$target,
k = k)
})
View(predicciones)
sapply(predicciones, length())
sapply(predicciones, length
)
# Instala y carga las bibliotecas necesarias
install.packages("pROC")
# Instala y carga las bibliotecas necesarias
library(pROC)
install.packages("ROCR")
library(ROCR)
target = test$target
predicted = predicciones[[1]]
accuracy_function <- function(target, predicted){
### proportion of correct predictions
### target: real target
### predicted: probabilistic predictions from 0 to 1.
accuracy <- mean(target == predicted)
return(accuracy)
}
accuracy_function(target, predicted)
accuracy <- mean(target == predicted)
confusion_matrix <- table(target, predicted)
precision <- confusion_matrix[2, 2] / sum(confusion_matrix[, 2]) # TP / (TP + FP)
sensitivity <- confusion_matrix[2, 2] / sum(confusion_matrix[2, ]) # TP / (TP + FN)
specificity <- confusion_matrix[1, 1] / sum(confusion_matrix[1, ]) # TN / (TN + FP)
### Combina precisión y sensibilidad en una sola métrica.
f1_score <- 2 * (precision * sensitivity) / (precision + sensitivity)
confusion_matrix
df <- data.frame(Accuracy = accuracy,
ConfussionMatrix = confusion_matrix,
Precision = precision,
Sensitivity = sensitivity,
Specificity = specificity)
df
accuracy
confusion_matrix
df <- data.frame(Accuracy = accuracy,
Precision = precision,
Sensitivity = sensitivity,
Specificity = specificity,
F1_Score = f1_score)
df
metricsBinnaryPred <- function(target, predicted){
### target: real target
### predicted: probabilistic predictions from 0 to 1.
accuracy <- mean(target == predicted)
confusion_matrix <- table(target, predicted)
precision <- confusion_matrix[2, 2] / sum(confusion_matrix[, 2]) # TP / (TP + FP)
sensitivity <- confusion_matrix[2, 2] / sum(confusion_matrix[2, ]) # TP / (TP + FN)
specificity <- confusion_matrix[1, 1] / sum(confusion_matrix[1, ]) # TN / (TN + FP)
### Combina precisión y sensibilidad en una sola métrica.
f1_score <- 2 * (precision * sensitivity) / (precision + sensitivity)
df <- data.frame(Accuracy = accuracy,
Precision = precision,
Sensitivity = sensitivity,
Specificity = specificity,
F1_Score = f1_score)
return(df)
}
print(knn_model) #
# Functions ----------------------------------------
functions <- list.files(file.path(path, "functions"))
functions
# Functions ----------------------------------------
functions <- list.files(file.path(path, "functions"), full.names = )
sapply(functions, source)
# Functions ----------------------------------------
functions <- list.files(file.path(path, "functions"), full.names = T)
sapply(functions, source)
# Functions ----------------------------------------
functions <- list.files(file.path(path, "functions"), full.names = T)
lapply(functions, source)
metricsBinnaryPred(predicciones[[1]])
metricsBinnaryPred(target = target, predicted = predicciones[[1]])
metrics <- lapply(predicciones, function(x) metricsBinnaryPred(target, x))
View(metrics)
metrics <- rbindlist(lapply(predicciones, function(x) metricsBinnaryPred(target, x)))
View(metrics)
row.names(metrics) <- paste0("knn_k", k_lista)
View(metrics)
paste0("knn_k", k_lista)
rownames(metrics)
View(metrics)
metrics <- rbindlist(lapply(predicciones, function(x) metricsBinnaryPred(target, x)))
metrics$model <- paste0("knn_k", k_lista)
metrics <- metrics %>% select(model, everything())
View(metrics)
round(metrics, 3)
metrics <- rbindlist(lapply(predicciones, function(x) metricsBinnaryPred(target, x)))
round(metrics, 3)
metrics$model <- paste0("knn_k", k_lista)
metrics <- metrics %>% select(model, everything())
View(metrics)
metrics <- rbindlist(lapply(predicciones, function(x) metricsBinnaryPred(target, x)))
metrics <- round(metrics, 3)
metrics$model <- paste0("knn_k", k_lista)
metrics <- metrics %>% select(model, everything())
View(metrics)
names(metrics)[2:ncol(metrics)]
metric="Accuracy"
aux <- metrics[c("model", metric)]
aux <- metrics[,c("model", metric)]
aux <- aux[order(aux$metric, decreasing = T)]
aux <- aux[order(aux$metric, decreasing = T),]
aux <- aux[order(aux[,metric], decreasing = T),]
aux[,metric]
aux <- metrics[,c("model", metric)]
metric
metrics[,c("model", metric)]
View(metrics)
aux <- metrics[1:nrow(metrics),c("model", metric)]
aux <- aux[order(aux[,metric], decreasing = T),]
aux <- aux[order(aux[,metric], decreasing = T),1:ncol(metrics)]
1:ncol(metrics)
aux <- aux[order(aux[,metric], decreasing = T),1:ncol(aux)]
aux <- metrics[1:nrow(metrics),c("model", metric)]
aux <- aux[order(aux[1:nrow(aux),metric], decreasing = T),1:ncol(aux)]
aux <- metrics[1:nrow(metrics),c("model", metric)]
metrics[1:nrow(metrics),c("model", metric)]
nrow(metrics)
1:nrow(metrics)
metrics <- data.frame(rbindlist(lapply(predicciones, function(x) metricsBinnaryPred(target, x))))
metrics <- round(metrics, 3)
metrics$model <- paste0("knn_k", k_lista)
metrics <- metrics %>% select(model, everything())
aux <- metrics[,c("model", metric)]
aux <- aux[order(aux[,metric], decreasing = T),]
aux_final <- data.frame(metric = aux$model)
View(aux_final)
metrics_ordenado <- data.frame()
for(metric in names(metrics)[2:ncol(metrics)]){
aux <- metrics[,c("model", metric)]
aux <- aux[order(aux[,metric], decreasing = T),]
aux_final <- data.frame(metric = aux$model)
metrics_ordenado <- cbind(metrics_ordenado, aux_final)
}
metrics_ordenado <- data.frame()
metric
names(metrics)[2:ncol(metrics)]
aux <- metrics[,c("model", metric)]
aux <- aux[order(aux[,metric], decreasing = T),]
aux_final <- data.frame(metric = aux$model)
metrics_ordenado <- cbind(metrics_ordenado, aux_final)
View(aux_final)
metrics_ordenado <- list()
for(metric in names(metrics)[2:ncol(metrics)]){
print(metric)
aux <- metrics[,c("model", metric)]
aux <- aux[order(aux[,metric], decreasing = T),]
aux_final <- data.frame(metric = aux$model)
metrics_ordenado[[metric]] <- aux_final
}
metrics_ordenado <- cbind(metrics_ordenado)
View(metrics_ordenado)
metrics_ordenado <- do.call(metrics_ordenado, cbind)
metrics_ordenado <- do.call(cbind, metrics_ordenado)
View(predicciones)
View(metrics_ordenado)
metric
metrics_ordenado <- list()
for(metric in names(metrics)[2:ncol(metrics)]){
print(metric)
aux <- metrics[,c("model", metric)]
aux <- aux[order(aux[,metric], decreasing = T),]
aux_final <- data.frame(metric = aux$model)
metrics_ordenado[[metric]] <- aux_final
}
names(metrics_ordenado) <- names(metrics)[2:ncol(metrics)]
View(metrics_ordenado)
metrics_ordenado <- do.call(cbind, metrics_ordenado)
View(metrics_ordenado)
names(metrics_ordenado) <- names(metrics)[2:ncol(metrics)]
View(metrics_ordenado)
pathOutput <- file.path(pathProj, "01_Modelos/00_datos")
saveRDS(train, file.path(pathOutput, "train_input_modelo.rds"))
saveRDS(test, file.path(pathOutput, "test_input_modelo.rds"))
pathProj
pathOutput <- file.path(pathProj, "01_Modelos/knn/output")
pathData <- file.path(pathProj, "01_Modelos/00_datos")
# Code ---------------------------------------------
train <- readRDS(pathData, "train_input_modelo.rds")
test <- readRDS(pathData, "test_input_modelo.rds")
pathData
# Code ---------------------------------------------
train <- readRDS(file.path(pathData, "train_input_modelo.rds"))
test <- readRDS(file.path(pathData, "test_input_modelo.rds"))
names(predicciones)
View(predicciones)
pred_df <- do.call(cbind, predicicones)
pred_df <- do.call(cbind, predicciones)
names(pred_df) <- paste0("k_", k_lista)
View(pred_df)
View(predicciones)
predicciones[[1]]
aux <- as.data.frame(predicciones[[1]])
View(aux)
pred_df <- do.call(cbind, lapply(predicciones, as.data.frame))
View(pred_df)
names(pred_df) <- paste0("k_", k_lista)
pred_df$id = test$id
pred_df <- pred_df %>% select(id, everything())
pathOutput
saveRDS(pred_df, file.path(pathOutput, "scores_model_output.rds"))
# Code ---------------------------------------------
predicciones <- readRDS(file.path(pathData, "scores_modelo_output.rds"))
pathData <- file.path(pathProj, "01_Modelos/knn/output")
# Code ---------------------------------------------
predicciones <- readRDS(file.path(pathData, "scores_modelo_output.rds"))
# Code ---------------------------------------------
predicciones <- readRDS(file.path(pathData, "scores_model_output.rds"))
target <- readRDS(file.path(pathTmp, "master.rds"))
master <- readRDS(file.path(pathTmp, "master.rds"))
View(master)
